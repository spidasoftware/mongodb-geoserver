////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General Gradle Settings
////////////////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'java-library-distribution'

group = 'com.spidasoftware'
version = '0.5.1'
description = "mongodb-geoserver-plugin"

sourceCompatibility = 1.7
targetCompatibility = 1.7


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
////////////////////////////////////////////////////////////////////////////////////////////////////////////
buildscript {

	try {
		project.ext.m2Settings = [
			username: System.getenv('ARTIFACTORY_USERNAME'),
			password: System.getenv('ARTIFACTORY_PASSWORD'),
			repo: System.getenv('ARTIFACTORY_URL_PRIVATE'),
			exposed: System.getenv('ARTIFACTORY_URL_EXPOSED'),
			snapshots: System.getenv('ARTIFACTORY_URL'),
			releases: System.getenv('ARTIFACTORY_URL')
		]
	} catch(ex){
		println ex.message //use ex.printStackTrace() if you want to show the full stacktrace
	}

	//uncomment to print out maven settings
	//println "m2Settings: ${m2Settings}"

	repositories {
	}

	dependencies {
	}
}

repositories {
    maven { 
    	url m2Settings.repo 
    	credentials {
    		username m2Settings.username
    		password m2Settings.password
    	}
    }
    maven { url "http://download.osgeo.org/webdav/geotools" }
}

task sourcesZip(type: Zip, dependsOn: classes) {
    classifier = 'sources'
    into ('') {
		from { 'build.gradle' }
		from { 'gradlew' }
		from { 'gradlew.bat' }
		from { 'LICENSE' }
		from { 'README.md' }
        		
	}
	into ('src') {
		from { 'src' }
	}
	into ('gradle') {
		from { 'gradle' }
	}
} 

distributions {
    main {
        contents {
        	from sourcesZip
        	from jar
        	into ('') {
        		from { 'LICENSE' }
        		from { 'README.md' }
        	}
            exclude { override ->
                override.file.path.matches('.*(gt|net|gs|jts|jscience|wicket|htmlvalidator|slf4j|log4j|gs|spring|bcprov|srvlet|json|commons|freemarker|xstream|guava|jsr|jasypt|jai|servlet|imageio|jdom|postgres|xpp|aopalliance|cglib|hsqldb|xmlpull|xpp|vecmath|jgrdidshift|org.w3|common|ecore|picocontainer|xsd|xml|jgridshift|core).*.jar')
            }
        }
    }
}

artifacts { archives distZip }

uploadArchives {
	repositories.mavenDeployer {
		repository(url: m2Settings.repo) {
			authentication(userName: m2Settings.username, password: m2Settings.password)
		}
	}
}

def geotoolsVersion = '14.3'
def geoserverVersion = '2.8.3'
dependencies {
    compile group: 'org.geotools', name: 'gt-main', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools', name: 'gt-data', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools', name: 'gt-opengis', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools', name: 'gt-api', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools', name: 'gt-complex', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools', name: 'gt-referencing', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools', name: 'gt-metadata', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools.xsd', name: 'gt-xsd-core', version:"${geotoolsVersion}", transitive: false
    compile group: 'org.geotools.ogc', name: 'net.opengis.wfs', version:"${geotoolsVersion}", transitive: false
    compile(group: 'org.geoserver.web', name: 'gs-web-core', version:"${geoserverVersion}") {
        exclude module: 'jai_core'
    }
    compile group: 'org.mongodb', name:'mongo-java-driver', version:'3.2.2'
    compile group: 'com.vividsolutions', name:'jts', version:'1.13', transitive: false
    compile group: 'org.jscience', name:'jscience', version:'4.3.1', transitive: false

    compile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "cglib:cglib:2.2"
    testCompile 'org.objenesis:objenesis:1.4'

}

test {
    testLogging.showStandardStreams = true
    systemProperty "mongoHost", "localhost"
    systemProperty "mongoPort", "27017"
    systemProperty "mongoDatabase", "test_spidadb_wfs"
}
